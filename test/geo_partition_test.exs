defmodule GeoPartitionTest do
  use ExUnit.Case
  doctest GeoPartition

  alias GeoPartition.Shapes

  describe "partition" do
    test "Polygon input" do
      shape = Shapes.top_level_test
      assert GeoPartition.partition(shape, 100, :multipolygon) == %Geo.MultiPolygon{
        properties: %{},
        srid: nil,
        coordinates: [
          [
            [
              {-93.08441162109374, 38.78406349514289},
              {-92.67242431640625, 39.157752153690964},
              {-93.1146240234375, 39.00637903337455},
              {-93.46343994140625, 39.18117526158749},
              {-93.08441162109374, 38.78406349514289}
            ],
            [
              {-93.37005615234375, 39.42346418978382},
              {-93.603515625, 39.16414104768742},
              {-93.09814453125, 38.83542884007305},
              {-92.82073974609375, 39.06184913429154},
              {-93.07891845703125, 38.90813299596705},
              {-93.526611328125, 39.16839998800286},
              {-93.37005615234375, 39.42346418978382}
            ],
            [
              {-93.31787109374999, 39.49344386279537},
              {-93.34465026855469, 39.46641460192054},
              {-93.31443786621094, 39.4669446883827},
              {-93.31787109374999, 39.49344386279537}
            ]
          ],
          [
            [
              {-93.46343994140625, 39.18117526158749},
              {-93.1915283203125, 39.65011210186371},
              {-93.68865966796875, 39.142842478062505},
              {-93.08441162109374, 38.78406349514289},
              {-93.46343994140625, 39.18117526158749}
            ],
            [
              {-93.37005615234375, 39.42346418978382},
              {-93.603515625, 39.16414104768742},
              {-93.09814453125, 38.83542884007305},
              {-92.82073974609375, 39.06184913429154},
              {-93.07891845703125, 38.90813299596705},
              {-93.526611328125, 39.16839998800286},
              {-93.37005615234375, 39.42346418978382}
            ],
            [
              {-93.31787109374999, 39.49344386279537},
              {-93.34465026855469, 39.46641460192054},
              {-93.31443786621094, 39.4669446883827},
              {-93.31787109374999, 39.49344386279537}
            ]
          ]
        ]
      }

      assert GeoPartition.partition(shape, 10, :multipolygon_json) == ~S({"type":"MultiPolygon","coordinates":[[[[-84.16557312011717,36.887858857884986],[-84.15544774212663,36.90341222036663],[-84.17381286621094,36.91641125204138],[-84.23904418945313,36.875775782851],[-84.16557312011717,36.887858857884986]]],[[[-84.16557312011717,36.887858857884986],[-84.14282165268783,36.894475338928224],[-84.11407470703125,36.87412794266634],[-84.16557312011717,36.887858857884986]]],[[[-84.23904418945313,36.875775782851],[-84.16557312011717,36.887858857884986],[-84.11407470703125,36.87412794266634],[-84.23904418945313,36.875775782851]]],[[[-84.11407470703125,36.87412794266634],[-84.17861938476563,36.83401954216856],[-84.23904418945313,36.875775782851],[-84.11407470703125,36.87412794266634]]]]})

      assert GeoPartition.partition(shape, 10, :feature_collection) == ~S({"type":"FeatureCollection","features":[{"type":"Feature","properties":{},"geometry":{"type":"Polygon","coordinates":[[[-84.16557312011717,36.887858857884986],[-84.15544774212663,36.90341222036663],[-84.17381286621094,36.91641125204138],[-84.23904418945313,36.875775782851],[-84.16557312011717,36.887858857884986]]]}},{"type":"Feature","properties":{},"geometry":{"type":"Polygon","coordinates":[[[-84.16557312011717,36.887858857884986],[-84.14282165268783,36.894475338928224],[-84.11407470703125,36.87412794266634],[-84.16557312011717,36.887858857884986]]]}},{"type":"Feature","properties":{},"geometry":{"type":"Polygon","coordinates":[[[-84.23904418945313,36.875775782851],[-84.16557312011717,36.887858857884986],[-84.11407470703125,36.87412794266634],[-84.23904418945313,36.875775782851]]]}},{"type":"Feature","properties":{},"geometry":{"type":"Polygon","coordinates":[[[-84.11407470703125,36.87412794266634],[-84.17861938476563,36.83401954216856],[-84.23904418945313,36.875775782851],[-84.11407470703125,36.87412794266634]]]}}]})


      assert GeoPartition.partition(shape, 10, :feature_collection_multipolygon) == ~S({"type":"FeatureCollection","features":[{"type":"Feature","properties":{},"geometry":{"type":"MultiPolygon","coordinates":[[[[-84.16557312011717,36.887858857884986],[-84.15544774212663,36.90341222036663],[-84.17381286621094,36.91641125204138],[-84.23904418945313,36.875775782851],[-84.16557312011717,36.887858857884986]]]]}},{"type":"Feature","properties":{},"geometry":{"type":"MultiPolygon","coordinates":[[[[-84.16557312011717,36.887858857884986],[-84.14282165268783,36.894475338928224],[-84.11407470703125,36.87412794266634],[-84.16557312011717,36.887858857884986]]]]}},{"type":"Feature","properties":{},"geometry":{"type":"MultiPolygon","coordinates":[[[[-84.23904418945313,36.875775782851],[-84.16557312011717,36.887858857884986],[-84.11407470703125,36.87412794266634],[-84.23904418945313,36.875775782851]]]]}},{"type":"Feature","properties":{},"geometry":{"type":"MultiPolygon","coordinates":[[[[-84.11407470703125,36.87412794266634],[-84.17861938476563,36.83401954216856],[-84.23904418945313,36.875775782851],[-84.11407470703125,36.87412794266634]]]]}}]})

      assert GeoPartition.partition(shape, 10, :list) == [
        %Geo.Polygon{
          coordinates: [
            [
              {-84.16557312011717, 36.887858857884986},
              {-84.15544774212663, 36.90341222036663},
              {-84.17381286621094, 36.91641125204138},
              {-84.23904418945313, 36.875775782851},
              {-84.16557312011717, 36.887858857884986}
            ]
          ],
          properties: %{},
          srid: nil
        },
        %Geo.Polygon{
          coordinates: [
            [
              {-84.16557312011717, 36.887858857884986},
              {-84.14282165268783, 36.894475338928224},
              {-84.11407470703125, 36.87412794266634},
              {-84.16557312011717, 36.887858857884986}
            ]
          ],
          properties: %{},
          srid: nil
        },
        %Geo.Polygon{
          coordinates: [
            [
              {-84.23904418945313, 36.875775782851},
              {-84.16557312011717, 36.887858857884986},
              {-84.11407470703125, 36.87412794266634},
              {-84.23904418945313, 36.875775782851}
            ]
          ],
          properties: %{},
          srid: nil
        },
        %Geo.Polygon{
          coordinates: [
            [
              {-84.11407470703125, 36.87412794266634},
              {-84.17861938476563, 36.83401954216856},
              {-84.23904418945313, 36.875775782851},
              {-84.11407470703125, 36.87412794266634}
            ]
          ],
          properties: %{},
          srid: nil
        }
      ]

    end

    test "Multipolygon input" do
      shape = Shapes.intersecting_diamonds
      shape_multi = %Geo.MultiPolygon{
        coordinates: [shape.coordinates]
      }
      assert GeoPartition.partition(shape_multi, 10, :multipolygon) == %Geo.MultiPolygon{
        coordinates: [
          [
            [
              {-84.16557312011717, 36.887858857884986},
              {-84.15544774212663, 36.90341222036663},
              {-84.17381286621094, 36.91641125204138},
              {-84.23904418945313, 36.875775782851},
              {-84.16557312011717, 36.887858857884986}
            ]
          ],
          [
            [
              {-84.16557312011717, 36.887858857884986},
              {-84.14282165268783, 36.894475338928224},
              {-84.11407470703125, 36.87412794266634},
              {-84.16557312011717, 36.887858857884986}
            ]
          ],
          [
            [
              {-84.23904418945313, 36.875775782851},
              {-84.16557312011717, 36.887858857884986},
              {-84.11407470703125, 36.87412794266634},
              {-84.23904418945313, 36.875775782851}
            ]
          ],
          [
            [
              {-84.11407470703125, 36.87412794266634},
              {-84.17861938476563, 36.83401954216856},
              {-84.23904418945313, 36.875775782851},
              {-84.11407470703125, 36.87412794266634}
            ]
          ]
        ],
        properties: %{},
        srid: nil
      }
    end

    test "JSON input" do
      shape = Shapes.intersecting_diamonds |> Geo.JSON.encode! |> Poison.encode!
      assert GeoPartition.partition(shape, 10, :multipolygon) == %Geo.MultiPolygon{
        coordinates: [
          [
            [
              {-84.16557312011717, 36.887858857884986},
              {-84.15544774212663, 36.90341222036663},
              {-84.17381286621094, 36.91641125204138},
              {-84.23904418945313, 36.875775782851},
              {-84.16557312011717, 36.887858857884986}
            ]
          ],
          [
            [
              {-84.16557312011717, 36.887858857884986},
              {-84.14282165268783, 36.894475338928224},
              {-84.11407470703125, 36.87412794266634},
              {-84.16557312011717, 36.887858857884986}
            ]
          ],
          [
            [
              {-84.23904418945313, 36.875775782851},
              {-84.16557312011717, 36.887858857884986},
              {-84.11407470703125, 36.87412794266634},
              {-84.23904418945313, 36.875775782851}
            ]
          ],
          [
            [
              {-84.11407470703125, 36.87412794266634},
              {-84.17861938476563, 36.83401954216856},
              {-84.23904418945313, 36.875775782851},
              {-84.11407470703125, 36.87412794266634}
            ]
          ]
        ],
        properties: %{},
        srid: nil
      }
    end
  end
end
